/* tslint:disable */
/* eslint-disable */
import { GraphQLResolveInfo } from 'graphql';
/**
 * This file is auto-generated by graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */
 

/*******************************
 *                             *
 *          TYPE DEFS          *
 *                             *
 *******************************/
export interface GQLQuery {
  Anime?: GQLAnime;
  Episode?: GQLEpisode;
  Episodes: GQLEpisodePaginatedList;
  
  /**
   * The most watched episodes
   */
  HottestEpisodes: GQLEpisodePaginatedList;
  
  /**
   * Get the newest episodes available
   */
  NewestEpisodes: GQLEpisodePaginatedList;
  Genre?: GQLGenre;
  Genres: GQLGenrePaginatedList;
  Release?: GQLRelease;
  Releases: GQLReleasePaginatedList;
  RandomRelease?: GQLRelease;
  AiringReleases: Array<GQLRelease>;
}

export interface GQLAnime {
  id: number;
  title: string;
  created_at: string;
  updated_at: string;
  Releases: Array<GQLRelease>;
}

/**
 * Release schema.
 */
export interface GQLRelease {
  id: number;
  
  /**
   * E.g: This Release is the 2nd installment on the One Punch Man Franchise
   */
  release_order: number;
  
  /**
   * Title of the Release (Optional when releases have no particular name) \n
   * E.g Tokyo Ghoul:re
   */
  title?: string;
  
  /**
   * When the release started airing (Which will be the release date in the case of a Movie)
   */
  started_airing: string;
  
  /**
   * When the release finished airing (Not aplicable to Movies, OVAs, etc...)
   */
  stopped_airing?: string;
  
  /**
   * Poster image file for this Release
   */
  poster?: string;
  
  /**
   * Background image file for this Release
   */
  background?: string;
  
  /**
   * When you only need the count of episodes and no actual episode data
   */
  EpisodeCount: number;
  
  /**
   * Returns the latest episode of this Release
   */
  LatestEpisode?: GQLEpisode;
  
  /**
   * Episodes of this release
   */
  Episodes: GQLEpisodePaginatedList;
  
  /**
   * List of descriptions of this Release in many languages
   */
  Descriptions: Array<GQLReleaseDescription>;
  
  /**
   * This Release belongs to this Anime
   */
  Anime: GQLAnime;
  
  /**
   * Genres that this release fits into
   */
  Genres: Array<GQLGenre>;
  
  /**
   * Is this release a Season, Movie, OVA or Special ?
   */
  ReleaseType: GQLReleaseType;
}

/**
 * Episode schema.
 */
export interface GQLEpisode {
  id: number;
  
  /**
   * Thumbnail of this category
   */
  thumbnail?: string;
  
  /**
   * Episode order E.g: 'Episode #1'
   */
  episode_order: number;
  
  /**
   * Episode file UUID Key code
   */
  episode_code: string;
  
  /**
   * What is the episode before this one ?
   */
  EarlierEpisode?: GQLEpisode;
  
  /**
   * What is the episode after this one ?
   */
  LaterEpisode?: GQLEpisode;
  
  /**
   * The Release that this episode belongs to
   */
  Release: GQLRelease;
  
  /**
   * Versions of this episode in different Languages, and Sources.
   */
  EpisodeSubtitles: Array<GQLEpisodeSubtitle>;
}

/**
 * EpisodeSubtitle belongs to an Episode,
 * and an Episode might have multiple EpisodeSubtitles based on available Languages
 */
export interface GQLEpisodeSubtitle {
  id: number;
  
  /**
   * Title of this episode, in the expected language
   */
  subtitle_code: string;
  
  /**
   * Language of this episode
   */
  Language: GQLLanguage;
}

/**
 * Language schema
 */
export interface GQLLanguage {
  id: number;
  
  /**
   * Name of the language e.g: 'Spanish'
   */
  name: string;
  
  /**
   * Corresponding ISO code
   */
  iso_code: string;
}

export interface GQLEpisodePaginatedList {
  rows: Array<GQLEpisode>;
  count: number;
}

/**
 * ReleaseDescription schema.
 */
export interface GQLReleaseDescription {
  id: number;
  
  /**
   * Text body of this description model
   */
  description: string;
  
  /**
   * Language support of this description
   */
  Language: GQLLanguage;
}

/**
 * Genre schema.
 */
export interface GQLGenre {
  id: number;
  
  /**
   * Title of this genre
   */
  title: string;
  
  /**
   * Thumbnail of this category
   */
  thumbnail?: string;
}

/**
 * ReleaseType schema. Releases can be Releases, Movies, OVAs, Specials ....
 */
export interface GQLReleaseType {
  id: number;
  
  /**
   * Title of this Release Type
   */
  title: string;
}

export interface GQLEpisodesFilter {
  release_id?: number;
}

export interface GQLGenresFilter {
  title?: string;
}

export interface GQLGenrePaginatedList {
  rows: Array<GQLGenre>;
  count: number;
}

export interface GQLReleasesFilter {
  anime_id?: number;
  title?: string;
  Genres?: Array<number>;
}

export interface GQLReleasePaginatedList {
  rows: Array<GQLRelease>;
  count: number;
}

export interface GQLMutation {
  
  /**
   * Marks x episode as "seen"
   */
  EpisodeSeen: boolean;
}

/*********************************
 *                               *
 *         TYPE RESOLVERS        *
 *                               *
 *********************************/
/**
 * This interface define the shape of your resolver
 * Note that this type is designed to be compatible with graphql-tools resolvers
 * However, you can still use other generated interfaces to make your resolver type-safed
 */
export interface GQLResolver {
  Query?: GQLQueryTypeResolver;
  Anime?: GQLAnimeTypeResolver;
  Release?: GQLReleaseTypeResolver;
  Episode?: GQLEpisodeTypeResolver;
  EpisodeSubtitle?: GQLEpisodeSubtitleTypeResolver;
  Language?: GQLLanguageTypeResolver;
  EpisodePaginatedList?: GQLEpisodePaginatedListTypeResolver;
  ReleaseDescription?: GQLReleaseDescriptionTypeResolver;
  Genre?: GQLGenreTypeResolver;
  ReleaseType?: GQLReleaseTypeTypeResolver;
  GenrePaginatedList?: GQLGenrePaginatedListTypeResolver;
  ReleasePaginatedList?: GQLReleasePaginatedListTypeResolver;
  Mutation?: GQLMutationTypeResolver;
}
export interface GQLQueryTypeResolver<TParent = any> {
  Anime?: QueryToAnimeResolver<TParent>;
  Episode?: QueryToEpisodeResolver<TParent>;
  Episodes?: QueryToEpisodesResolver<TParent>;
  HottestEpisodes?: QueryToHottestEpisodesResolver<TParent>;
  NewestEpisodes?: QueryToNewestEpisodesResolver<TParent>;
  Genre?: QueryToGenreResolver<TParent>;
  Genres?: QueryToGenresResolver<TParent>;
  Release?: QueryToReleaseResolver<TParent>;
  Releases?: QueryToReleasesResolver<TParent>;
  RandomRelease?: QueryToRandomReleaseResolver<TParent>;
  AiringReleases?: QueryToAiringReleasesResolver<TParent>;
}

export interface QueryToAnimeArgs {
  id?: number;
}
export interface QueryToAnimeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToAnimeArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToEpisodeArgs {
  id?: number;
}
export interface QueryToEpisodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToEpisodeArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToEpisodesArgs {
  filter?: GQLEpisodesFilter;
  limit?: number;
  offset?: number;
}
export interface QueryToEpisodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToEpisodesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToHottestEpisodesArgs {
  limit?: number;
  offset?: number;
}
export interface QueryToHottestEpisodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToHottestEpisodesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToNewestEpisodesArgs {
  limit?: number;
  offset?: number;
}
export interface QueryToNewestEpisodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToNewestEpisodesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToGenreArgs {
  id?: number;
}
export interface QueryToGenreResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToGenreArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToGenresArgs {
  filter?: GQLGenresFilter;
  limit?: number;
  offset?: number;
}
export interface QueryToGenresResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToGenresArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToReleaseArgs {
  id?: number;
}
export interface QueryToReleaseResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToReleaseArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToReleasesArgs {
  filter?: GQLReleasesFilter;
  limit?: number;
  offset?: number;
}
export interface QueryToReleasesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToReleasesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToRandomReleaseResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToAiringReleasesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAnimeTypeResolver<TParent = any> {
  id?: AnimeToIdResolver<TParent>;
  title?: AnimeToTitleResolver<TParent>;
  created_at?: AnimeToCreated_atResolver<TParent>;
  updated_at?: AnimeToUpdated_atResolver<TParent>;
  Releases?: AnimeToReleasesResolver<TParent>;
}

export interface AnimeToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AnimeToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AnimeToCreated_atResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AnimeToUpdated_atResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AnimeToReleasesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLReleaseTypeResolver<TParent = any> {
  id?: ReleaseToIdResolver<TParent>;
  release_order?: ReleaseToRelease_orderResolver<TParent>;
  title?: ReleaseToTitleResolver<TParent>;
  started_airing?: ReleaseToStarted_airingResolver<TParent>;
  stopped_airing?: ReleaseToStopped_airingResolver<TParent>;
  poster?: ReleaseToPosterResolver<TParent>;
  background?: ReleaseToBackgroundResolver<TParent>;
  EpisodeCount?: ReleaseToEpisodeCountResolver<TParent>;
  LatestEpisode?: ReleaseToLatestEpisodeResolver<TParent>;
  Episodes?: ReleaseToEpisodesResolver<TParent>;
  Descriptions?: ReleaseToDescriptionsResolver<TParent>;
  Anime?: ReleaseToAnimeResolver<TParent>;
  Genres?: ReleaseToGenresResolver<TParent>;
  ReleaseType?: ReleaseToReleaseTypeResolver<TParent>;
}

export interface ReleaseToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseToRelease_orderResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseToStarted_airingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseToStopped_airingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseToPosterResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseToBackgroundResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseToEpisodeCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseToLatestEpisodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseToEpisodesArgs {
  limit?: number;
  offset?: number;
}
export interface ReleaseToEpisodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: ReleaseToEpisodesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseToDescriptionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseToAnimeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseToGenresResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseToReleaseTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLEpisodeTypeResolver<TParent = any> {
  id?: EpisodeToIdResolver<TParent>;
  thumbnail?: EpisodeToThumbnailResolver<TParent>;
  episode_order?: EpisodeToEpisode_orderResolver<TParent>;
  episode_code?: EpisodeToEpisode_codeResolver<TParent>;
  EarlierEpisode?: EpisodeToEarlierEpisodeResolver<TParent>;
  LaterEpisode?: EpisodeToLaterEpisodeResolver<TParent>;
  Release?: EpisodeToReleaseResolver<TParent>;
  EpisodeSubtitles?: EpisodeToEpisodeSubtitlesResolver<TParent>;
}

export interface EpisodeToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EpisodeToThumbnailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EpisodeToEpisode_orderResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EpisodeToEpisode_codeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EpisodeToEarlierEpisodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EpisodeToLaterEpisodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EpisodeToReleaseResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EpisodeToEpisodeSubtitlesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLEpisodeSubtitleTypeResolver<TParent = any> {
  id?: EpisodeSubtitleToIdResolver<TParent>;
  subtitle_code?: EpisodeSubtitleToSubtitle_codeResolver<TParent>;
  Language?: EpisodeSubtitleToLanguageResolver<TParent>;
}

export interface EpisodeSubtitleToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EpisodeSubtitleToSubtitle_codeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EpisodeSubtitleToLanguageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLLanguageTypeResolver<TParent = any> {
  id?: LanguageToIdResolver<TParent>;
  name?: LanguageToNameResolver<TParent>;
  iso_code?: LanguageToIso_codeResolver<TParent>;
}

export interface LanguageToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LanguageToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LanguageToIso_codeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLEpisodePaginatedListTypeResolver<TParent = any> {
  rows?: EpisodePaginatedListToRowsResolver<TParent>;
  count?: EpisodePaginatedListToCountResolver<TParent>;
}

export interface EpisodePaginatedListToRowsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EpisodePaginatedListToCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLReleaseDescriptionTypeResolver<TParent = any> {
  id?: ReleaseDescriptionToIdResolver<TParent>;
  description?: ReleaseDescriptionToDescriptionResolver<TParent>;
  Language?: ReleaseDescriptionToLanguageResolver<TParent>;
}

export interface ReleaseDescriptionToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseDescriptionToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseDescriptionToLanguageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLGenreTypeResolver<TParent = any> {
  id?: GenreToIdResolver<TParent>;
  title?: GenreToTitleResolver<TParent>;
  thumbnail?: GenreToThumbnailResolver<TParent>;
}

export interface GenreToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GenreToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GenreToThumbnailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLReleaseTypeTypeResolver<TParent = any> {
  id?: ReleaseTypeToIdResolver<TParent>;
  title?: ReleaseTypeToTitleResolver<TParent>;
}

export interface ReleaseTypeToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseTypeToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLGenrePaginatedListTypeResolver<TParent = any> {
  rows?: GenrePaginatedListToRowsResolver<TParent>;
  count?: GenrePaginatedListToCountResolver<TParent>;
}

export interface GenrePaginatedListToRowsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GenrePaginatedListToCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLReleasePaginatedListTypeResolver<TParent = any> {
  rows?: ReleasePaginatedListToRowsResolver<TParent>;
  count?: ReleasePaginatedListToCountResolver<TParent>;
}

export interface ReleasePaginatedListToRowsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleasePaginatedListToCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLMutationTypeResolver<TParent = any> {
  EpisodeSeen?: MutationToEpisodeSeenResolver<TParent>;
}

export interface MutationToEpisodeSeenArgs {
  episode_id: number;
}
export interface MutationToEpisodeSeenResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToEpisodeSeenArgs, context: any, info: GraphQLResolveInfo): TResult;
}

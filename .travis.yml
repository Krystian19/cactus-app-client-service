sudo: required

language: node_js
node_js:
  - "10"

# Handle git submodules yourself
git:
  submodules: false

services:
  - docker

before_install:
  # Use sed to replace the SSH URL with the public URL, then initialize submodules
  - sed -i 's/git@github.com:/https:\/\/github.com\//' .gitmodules
  - git submodule update --init --recursive

  # Setup the networks
  - docker network create testing_network

  # Build and run the cactus.bff service
  - git clone https://github.com/Krystian19/cactus-app-bff-service.git ~/cactus-bff
  - docker build -t cactus_app/cactus-app-bff-service ~/cactus-bff
  - docker run --name cactus.bff -d -e CACTUS_CORE_URL="cactus.core:9040" -p 4000:3000 --network=testing_network cactus_app/cactus-app-bff-service
  - while ! echo exit | curl -I --fail "http://localhost:4000"; do sleep 10; done # Wait until the cactus_bff is ready to continue
  - docker images
  - docker ps -a

  # Setup logger service
  - docker run --name cactus.logger -d -e ACCEPT_EULA=Y -p 4040:80 -p 5341:5341 --network=testing_network datalust/seq:5

  # Build the docker the client's image
  - docker build -t cactus_app/cactus-app-client-service .
  - docker images
install:
  - docker run -ti --name=cactus_client -d -e CODECOV_TOKEN=$CODECOV_TOKEN -e SERVICE_NAME="cactus_client" -e LOGGER_SERVICE_HOST="http://cactus.logger:5341/" -p 3000:3000 --network=testing_network cactus_app/cactus-app-client-service
  - docker ps -a

script:
  # Wait for a minute to give time for the container to start properly
  - sleep 1m
  # Check for code linting rules
  - docker exec -ti cactus_client yarn lint
  # Run the normal test processes
  - docker exec -ti cactus_client yarn test
after_success: docker exec -ti cactus_client yarn coverage